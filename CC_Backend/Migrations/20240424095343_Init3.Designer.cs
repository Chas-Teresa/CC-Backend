// <auto-generated />
using System;
using CC_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CC_Backend.Migrations
{
    [DbContext(typeof(NatureAIContext))]
    [Migration("20240424095343_Init3")]
    partial class Init3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CC_Backend.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CC_Backend.Models.Credentials", b =>
                {
                    b.Property<int>("CredentialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialsId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialsId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("CC_Backend.Models.Friends", b =>
                {
                    b.Property<int>("FriendId1")
                        .HasColumnType("int");

                    b.Property<int>("FriendId2")
                        .HasColumnType("int");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("CC_Backend.Models.Geodata", b =>
                {
                    b.Property<int>("GeodataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeodataId"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateWhenCollected")
                        .HasColumnType("datetime2");

                    b.HasKey("GeodataId");

                    b.ToTable("GeoData");
                });

            modelBuilder.Entity("CC_Backend.Models.Stamp", b =>
                {
                    b.Property<int>("StampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StampId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Facts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rarity")
                        .HasColumnType("float");

                    b.HasKey("StampId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Stamps");
                });

            modelBuilder.Entity("CC_Backend.Models.StampCollected", b =>
                {
                    b.Property<int>("StampCollectedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StampCollectedId"));

                    b.Property<int?>("GeodataId")
                        .HasColumnType("int");

                    b.Property<int>("StampId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StampCollectedId");

                    b.HasIndex("GeodataId");

                    b.HasIndex("StampId");

                    b.HasIndex("UserId");

                    b.ToTable("StampsCollected");
                });

            modelBuilder.Entity("CC_Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("CredentialsId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("CredentialsId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CC_Backend.Models.Stamp", b =>
                {
                    b.HasOne("CC_Backend.Models.Category", "Category")
                        .WithMany("Stamps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CC_Backend.Models.StampCollected", b =>
                {
                    b.HasOne("CC_Backend.Models.Geodata", "Geodata")
                        .WithMany()
                        .HasForeignKey("GeodataId");

                    b.HasOne("CC_Backend.Models.Stamp", "Stamp")
                        .WithMany()
                        .HasForeignKey("StampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CC_Backend.Models.User", "User")
                        .WithMany("StampsCollected")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geodata");

                    b.Navigation("Stamp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CC_Backend.Models.User", b =>
                {
                    b.HasOne("CC_Backend.Models.Credentials", null)
                        .WithOne("User")
                        .HasForeignKey("CC_Backend.Models.User", "CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CC_Backend.Models.Category", b =>
                {
                    b.Navigation("Stamps");
                });

            modelBuilder.Entity("CC_Backend.Models.Credentials", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("CC_Backend.Models.User", b =>
                {
                    b.Navigation("StampsCollected");
                });
#pragma warning restore 612, 618
        }
    }
}
